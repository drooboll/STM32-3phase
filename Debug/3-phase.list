
3-phase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080014f8  080014f8  000114f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001508  08001508  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001508  08001508  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001508  08001508  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001508  08001508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800150c  0800150c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001514  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001514  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002eb1  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a03  00000000  00000000  00022ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000428  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c0  00000000  00000000  00023d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011c66  00000000  00000000  000240d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000028d8  00000000  00000000  00035d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005dad7  00000000  00000000  0003860e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000960e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001064  00000000  00000000  00096160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080014e0 	.word	0x080014e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080014e0 	.word	0x080014e0

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <LL_RCC_HSE_EnableCSS+0x18>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <LL_RCC_HSE_EnableCSS+0x18>)
 800019e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <LL_RCC_HSE_Enable+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <LL_RCC_HSE_Enable+0x18>)
 80001ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001be:	6013      	str	r3, [r2, #0]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <LL_RCC_HSE_IsReady+0x20>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80001dc:	bf0c      	ite	eq
 80001de:	2301      	moveq	r3, #1
 80001e0:	2300      	movne	r3, #0
 80001e2:	b2db      	uxtb	r3, r3
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021000 	.word	0x40021000

080001f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_RCC_SetSysClkSource+0x24>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	f023 0203 	bic.w	r2, r3, #3
 8000200:	4904      	ldr	r1, [pc, #16]	; (8000214 <LL_RCC_SetSysClkSource+0x24>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4313      	orrs	r3, r2
 8000206:	604b      	str	r3, [r1, #4]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40021000 	.word	0x40021000

08000218 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <LL_RCC_GetSysClkSource+0x14>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f003 030c 	and.w	r3, r3, #12
}
 8000224:	4618      	mov	r0, r3
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40021000 	.word	0x40021000

08000230 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <LL_RCC_SetAHBPrescaler+0x24>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000240:	4904      	ldr	r1, [pc, #16]	; (8000254 <LL_RCC_SetAHBPrescaler+0x24>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4313      	orrs	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000268:	4904      	ldr	r1, [pc, #16]	; (800027c <LL_RCC_SetAPB1Prescaler+0x24>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	604b      	str	r3, [r1, #4]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	604b      	str	r3, [r1, #4]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <LL_RCC_PLL_Enable+0x18>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <LL_RCC_PLL_Enable+0x18>)
 80002b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40021000 	.word	0x40021000

080002c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LL_RCC_PLL_IsReady+0x20>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002d4:	bf0c      	ite	eq
 80002d6:	2301      	moveq	r3, #1
 80002d8:	2300      	movne	r3, #0
 80002da:	b2db      	uxtb	r3, r3
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	430b      	orrs	r3, r1
 8000304:	4903      	ldr	r1, [pc, #12]	; (8000314 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000306:	4313      	orrs	r3, r2
 8000308:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000322:	69da      	ldr	r2, [r3, #28]
 8000324:	4907      	ldr	r1, [pc, #28]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <LL_APB1_GRP1_EnableClock+0x2c>)
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4013      	ands	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000336:	68fb      	ldr	r3, [r7, #12]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000352:	699a      	ldr	r2, [r3, #24]
 8000354:	4907      	ldr	r1, [pc, #28]	; (8000374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4313      	orrs	r3, r2
 800035a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <LL_APB2_GRP1_EnableClock+0x2c>)
 800035e:	699a      	ldr	r2, [r3, #24]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000366:	68fb      	ldr	r3, [r7, #12]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_FLASH_SetLatency+0x24>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f023 0207 	bic.w	r2, r3, #7
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_FLASH_SetLatency+0x24>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4313      	orrs	r3, r2
 800038e:	600b      	str	r3, [r1, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40022000 	.word	0x40022000

080003a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <LL_FLASH_GetLatency+0x14>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0307 	and.w	r3, r3, #7
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40022000 	.word	0x40022000

080003b8 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003d8:	b4b0      	push	{r4, r5, r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d01c      	beq.n	8000422 <LL_TIM_OC_DisableFast+0x4a>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d017      	beq.n	800041e <LL_TIM_OC_DisableFast+0x46>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	2b10      	cmp	r3, #16
 80003f2:	d012      	beq.n	800041a <LL_TIM_OC_DisableFast+0x42>
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	2b40      	cmp	r3, #64	; 0x40
 80003f8:	d00d      	beq.n	8000416 <LL_TIM_OC_DisableFast+0x3e>
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000400:	d007      	beq.n	8000412 <LL_TIM_OC_DisableFast+0x3a>
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000408:	d101      	bne.n	800040e <LL_TIM_OC_DisableFast+0x36>
 800040a:	2305      	movs	r3, #5
 800040c:	e00a      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 800040e:	2306      	movs	r3, #6
 8000410:	e008      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 8000412:	2304      	movs	r3, #4
 8000414:	e006      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 8000416:	2303      	movs	r3, #3
 8000418:	e004      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 800041a:	2302      	movs	r3, #2
 800041c:	e002      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 800041e:	2301      	movs	r3, #1
 8000420:	e000      	b.n	8000424 <LL_TIM_OC_DisableFast+0x4c>
 8000422:	2300      	movs	r3, #0
 8000424:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3318      	adds	r3, #24
 800042a:	461a      	mov	r2, r3
 800042c:	4629      	mov	r1, r5
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <LL_TIM_OC_DisableFast+0x7c>)
 8000430:	5c5b      	ldrb	r3, [r3, r1]
 8000432:	4413      	add	r3, r2
 8000434:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000436:	6822      	ldr	r2, [r4, #0]
 8000438:	4629      	mov	r1, r5
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <LL_TIM_OC_DisableFast+0x80>)
 800043c:	5c5b      	ldrb	r3, [r3, r1]
 800043e:	4619      	mov	r1, r3
 8000440:	2304      	movs	r3, #4
 8000442:	408b      	lsls	r3, r1
 8000444:	43db      	mvns	r3, r3
 8000446:	4013      	ands	r3, r2
 8000448:	6023      	str	r3, [r4, #0]

}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bcb0      	pop	{r4, r5, r7}
 8000452:	4770      	bx	lr
 8000454:	080014f8 	.word	0x080014f8
 8000458:	08001500 	.word	0x08001500

0800045c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800045c:	b4b0      	push	{r4, r5, r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d01c      	beq.n	80004a6 <LL_TIM_OC_EnablePreload+0x4a>
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d017      	beq.n	80004a2 <LL_TIM_OC_EnablePreload+0x46>
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	2b10      	cmp	r3, #16
 8000476:	d012      	beq.n	800049e <LL_TIM_OC_EnablePreload+0x42>
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	2b40      	cmp	r3, #64	; 0x40
 800047c:	d00d      	beq.n	800049a <LL_TIM_OC_EnablePreload+0x3e>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000484:	d007      	beq.n	8000496 <LL_TIM_OC_EnablePreload+0x3a>
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800048c:	d101      	bne.n	8000492 <LL_TIM_OC_EnablePreload+0x36>
 800048e:	2305      	movs	r3, #5
 8000490:	e00a      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 8000492:	2306      	movs	r3, #6
 8000494:	e008      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 8000496:	2304      	movs	r3, #4
 8000498:	e006      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 800049a:	2303      	movs	r3, #3
 800049c:	e004      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 800049e:	2302      	movs	r3, #2
 80004a0:	e002      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 80004a2:	2301      	movs	r3, #1
 80004a4:	e000      	b.n	80004a8 <LL_TIM_OC_EnablePreload+0x4c>
 80004a6:	2300      	movs	r3, #0
 80004a8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3318      	adds	r3, #24
 80004ae:	461a      	mov	r2, r3
 80004b0:	4629      	mov	r1, r5
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <LL_TIM_OC_EnablePreload+0x7c>)
 80004b4:	5c5b      	ldrb	r3, [r3, r1]
 80004b6:	4413      	add	r3, r2
 80004b8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80004ba:	6822      	ldr	r2, [r4, #0]
 80004bc:	4629      	mov	r1, r5
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <LL_TIM_OC_EnablePreload+0x80>)
 80004c0:	5c5b      	ldrb	r3, [r3, r1]
 80004c2:	4619      	mov	r1, r3
 80004c4:	2308      	movs	r3, #8
 80004c6:	408b      	lsls	r3, r1
 80004c8:	4313      	orrs	r3, r2
 80004ca:	6023      	str	r3, [r4, #0]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bcb0      	pop	{r4, r5, r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	080014f8 	.word	0x080014f8
 80004dc:	08001500 	.word	0x08001500

080004e0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004f2:	f023 0307 	bic.w	r3, r3, #7
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	609a      	str	r2, [r3, #8]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	431a      	orrs	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	605a      	str	r2, [r3, #4]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	609a      	str	r2, [r3, #8]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
	...

0800054c <LL_GPIO_AF_RemapPartial_TIM1>:
  * @rmtoll MAPR          TIM1_REMAP           LL_GPIO_AF_RemapPartial_TIM1
  * @note  PARTIAL: Partial remap (ETR/PA12, CH1/PA8, CH2/PA9,  CH3/PA10, CH4/PA11, BKIN/PA6,  CH1N/PA7,  CH2N/PB0,  CH3N/PB1)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM1(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM1_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM1_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000558:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <LL_GPIO_AF_RemapPartial_TIM1+0x24>)
 800055e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000566:	6053      	str	r3, [r2, #4]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40010000 	.word	0x40010000

08000574 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800057e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000582:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4a03      	ldr	r2, [pc, #12]	; (8000598 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	6053      	str	r3, [r2, #4]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40010000 	.word	0x40010000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff fed0 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005ac:	f7ff feb4 	bl	8000318 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f7ff fdcb 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80005b6:	f7ff ffdd 	bl	8000574 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f975 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fa87 	bl	8000ad0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c2:	f000 f9b1 	bl	8000928 <MX_TIM1_Init>
    PB1   ------> TIM1_CH3N
    PA8   ------> TIM1_CH1
    PA9   ------> TIM1_CH2
    PA10   ------> TIM1_CH3*/

  GPIOA->CRL |= 0b10 << GPIO_CRL_CNF7_Pos | 0b11 << GPIO_CRL_MODE7_Pos;
 80005c6:	4b9b      	ldr	r3, [pc, #620]	; (8000834 <main+0x298>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a9a      	ldr	r2, [pc, #616]	; (8000834 <main+0x298>)
 80005cc:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80005d0:	6013      	str	r3, [r2, #0]
  GPIOA->CRH |= 0b10 << GPIO_CRH_CNF8_Pos | 0b11 << GPIO_CRH_MODE8_Pos | 0b10 << GPIO_CRH_CNF9_Pos | 0b11 << GPIO_CRH_MODE9_Pos | 0b10 << GPIO_CRH_CNF9_Pos | 0b11 << GPIO_CRH_MODE10_Pos;
 80005d2:	4b98      	ldr	r3, [pc, #608]	; (8000834 <main+0x298>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4a97      	ldr	r2, [pc, #604]	; (8000834 <main+0x298>)
 80005d8:	f443 736e 	orr.w	r3, r3, #952	; 0x3b8
 80005dc:	f043 0303 	orr.w	r3, r3, #3
 80005e0:	6053      	str	r3, [r2, #4]
  GPIOB->CRL |= 0b10 << GPIO_CRL_CNF0_Pos | 0b11 << GPIO_CRL_MODE0_Pos | 0b10 << GPIO_CRL_CNF1_Pos | 0b11 << GPIO_CRL_MODE1_Pos;
 80005e2:	4b95      	ldr	r3, [pc, #596]	; (8000838 <main+0x29c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a94      	ldr	r2, [pc, #592]	; (8000838 <main+0x29c>)
 80005e8:	f043 03bb 	orr.w	r3, r3, #187	; 0xbb
 80005ec:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= 0b1 << GPIO_CRL_CNF0_Pos | 0b11 << GPIO_CRL_MODE0_Pos;
 80005ee:	4b91      	ldr	r3, [pc, #580]	; (8000834 <main+0x298>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a90      	ldr	r2, [pc, #576]	; (8000834 <main+0x298>)
 80005f4:	f043 0307 	orr.w	r3, r3, #7
 80005f8:	6013      	str	r3, [r2, #0]
  //TIM1->CCR1 = pwmHigh;
  TIM1->CR1 |= TIM_CR1_CEN;
 80005fa:	4b90      	ldr	r3, [pc, #576]	; (800083c <main+0x2a0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a8f      	ldr	r2, [pc, #572]	; (800083c <main+0x2a0>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
  //TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC1NE;
  TIM1->BDTR |= TIM_BDTR_MOE;
 8000606:	4b8d      	ldr	r3, [pc, #564]	; (800083c <main+0x2a0>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	4a8c      	ldr	r2, [pc, #560]	; (800083c <main+0x2a0>)
 800060c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000610:	6453      	str	r3, [r2, #68]	; 0x44
  TIM1->EGR = TIM_EGR_UG;
 8000612:	4b8a      	ldr	r3, [pc, #552]	; (800083c <main+0x2a0>)
 8000614:	2201      	movs	r2, #1
 8000616:	615a      	str	r2, [r3, #20]
  //LL_mDelay(5000);
  uint32_t state = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  TIM1->CCR1 = 0;
 800061c:	4b87      	ldr	r3, [pc, #540]	; (800083c <main+0x2a0>)
 800061e:	2200      	movs	r2, #0
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1NE);
 8000622:	4b86      	ldr	r3, [pc, #536]	; (800083c <main+0x2a0>)
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	4a85      	ldr	r2, [pc, #532]	; (800083c <main+0x2a0>)
 8000628:	f023 0305 	bic.w	r3, r3, #5
 800062c:	6213      	str	r3, [r2, #32]

  TIM1->CCR2 = 0;
 800062e:	4b83      	ldr	r3, [pc, #524]	; (800083c <main+0x2a0>)
 8000630:	2200      	movs	r2, #0
 8000632:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2NE);
 8000634:	4b81      	ldr	r3, [pc, #516]	; (800083c <main+0x2a0>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a80      	ldr	r2, [pc, #512]	; (800083c <main+0x2a0>)
 800063a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800063e:	6213      	str	r3, [r2, #32]

  TIM1->CCR3 = pwmHigh;
 8000640:	4b7e      	ldr	r3, [pc, #504]	; (800083c <main+0x2a0>)
 8000642:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3NE);
 8000648:	4b7c      	ldr	r3, [pc, #496]	; (800083c <main+0x2a0>)
 800064a:	6a1b      	ldr	r3, [r3, #32]
 800064c:	4a7b      	ldr	r2, [pc, #492]	; (800083c <main+0x2a0>)
 800064e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000652:	6213      	str	r3, [r2, #32]

  TIM1->EGR = TIM_EGR_UG;
 8000654:	4b79      	ldr	r3, [pc, #484]	; (800083c <main+0x2a0>)
 8000656:	2201      	movs	r2, #1
 8000658:	615a      	str	r2, [r3, #20]

  LL_mDelay(300);
 800065a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800065e:	f000 fee1 	bl	8001424 <LL_mDelay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t rot = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  const uint32_t topValue = 900;
 8000666:	f44f 7361 	mov.w	r3, #900	; 0x384
 800066a:	60fb      	str	r3, [r7, #12]
  const uint32_t startValue = 10;
 800066c:	230a      	movs	r3, #10
 800066e:	60bb      	str	r3, [r7, #8]
  const uint32_t delayDefault = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	607b      	str	r3, [r7, #4]
  const uint32_t targetValue = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  //continue;
	if (rot < topValue)
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	429a      	cmp	r2, r3
 800067e:	d202      	bcs.n	8000686 <main+0xea>
		rot++;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	3301      	adds	r3, #1
 8000684:	613b      	str	r3, [r7, #16]

	if (rot > startValue){
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	429a      	cmp	r2, r3
 800068c:	d912      	bls.n	80006b4 <main+0x118>
		LL_mDelay(delayDefault - (rot - startValue) * (delayDefault - targetValue) / (topValue - startValue));
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	1a8a      	subs	r2, r1, r2
 800069a:	fb02 f203 	mul.w	r2, r2, r3
 800069e:	68f9      	ldr	r1, [r7, #12]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1acb      	subs	r3, r1, r3
 80006a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 feb9 	bl	8001424 <LL_mDelay>
 80006b2:	e002      	b.n	80006ba <main+0x11e>
	} else {
		LL_mDelay(delayDefault);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 feb5 	bl	8001424 <LL_mDelay>
	}
	GPIOA->ODR ^= GPIO_ODR_ODR0;
 80006ba:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <main+0x298>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	4a5d      	ldr	r2, [pc, #372]	; (8000834 <main+0x298>)
 80006c0:	f083 0301 	eor.w	r3, r3, #1
 80006c4:	60d3      	str	r3, [r2, #12]
	TIM1->CNT = 0;
 80006c6:	4b5d      	ldr	r3, [pc, #372]	; (800083c <main+0x2a0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24

	switch(state){
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b05      	cmp	r3, #5
 80006d0:	f200 80d6 	bhi.w	8000880 <main+0x2e4>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <main+0x140>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006f5 	.word	0x080006f5
 80006e0:	08000735 	.word	0x08000735
 80006e4:	08000775 	.word	0x08000775
 80006e8:	080007b5 	.word	0x080007b5
 80006ec:	080007f5 	.word	0x080007f5
 80006f0:	08000841 	.word	0x08000841
	case 0:
		TIM1->CCR1 = pwmHigh;
 80006f4:	4b51      	ldr	r3, [pc, #324]	; (800083c <main+0x2a0>)
 80006f6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE);
 80006fc:	4b4f      	ldr	r3, [pc, #316]	; (800083c <main+0x2a0>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a4e      	ldr	r2, [pc, #312]	; (800083c <main+0x2a0>)
 8000702:	f043 0305 	orr.w	r3, r3, #5
 8000706:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = 0; // ??
 8000708:	4b4c      	ldr	r3, [pc, #304]	; (800083c <main+0x2a0>)
 800070a:	2200      	movs	r2, #0
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2NE);
 800070e:	4b4b      	ldr	r3, [pc, #300]	; (800083c <main+0x2a0>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	4a4a      	ldr	r2, [pc, #296]	; (800083c <main+0x2a0>)
 8000714:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000718:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = 0;
 800071a:	4b48      	ldr	r3, [pc, #288]	; (800083c <main+0x2a0>)
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER &= ~(TIM_CCER_CC3E | TIM_CCER_CC3NE);
 8000720:	4b46      	ldr	r3, [pc, #280]	; (800083c <main+0x2a0>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a45      	ldr	r2, [pc, #276]	; (800083c <main+0x2a0>)
 8000726:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 800072a:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <main+0x2a0>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]

		break;
 8000732:	e0a5      	b.n	8000880 <main+0x2e4>
	case 1:
		TIM1->CCR1 = pwmHigh;
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <main+0x2a0>)
 8000736:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE);
 800073c:	4b3f      	ldr	r3, [pc, #252]	; (800083c <main+0x2a0>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	4a3e      	ldr	r2, [pc, #248]	; (800083c <main+0x2a0>)
 8000742:	f043 0305 	orr.w	r3, r3, #5
 8000746:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = 0; // ??
 8000748:	4b3c      	ldr	r3, [pc, #240]	; (800083c <main+0x2a0>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER &= ~(TIM_CCER_CC2E | TIM_CCER_CC2NE);
 800074e:	4b3b      	ldr	r3, [pc, #236]	; (800083c <main+0x2a0>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4a3a      	ldr	r2, [pc, #232]	; (800083c <main+0x2a0>)
 8000754:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000758:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = 0;
 800075a:	4b38      	ldr	r3, [pc, #224]	; (800083c <main+0x2a0>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3NE);
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <main+0x2a0>)
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	4a35      	ldr	r2, [pc, #212]	; (800083c <main+0x2a0>)
 8000766:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800076a:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <main+0x2a0>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]

		break;
 8000772:	e085      	b.n	8000880 <main+0x2e4>
	case 2:
		TIM1->CCR1 = 0;
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <main+0x2a0>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1NE);
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <main+0x2a0>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <main+0x2a0>)
 8000780:	f023 0305 	bic.w	r3, r3, #5
 8000784:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = pwmHigh;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <main+0x2a0>)
 8000788:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2NE);
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <main+0x2a0>)
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <main+0x2a0>)
 8000794:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000798:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = 0;
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <main+0x2a0>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3NE);
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <main+0x2a0>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <main+0x2a0>)
 80007a6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80007aa:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <main+0x2a0>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	615a      	str	r2, [r3, #20]

		break;
 80007b2:	e065      	b.n	8000880 <main+0x2e4>
	case 3:
		TIM1->CCR1 = 0;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <main+0x2a0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE);
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <main+0x2a0>)
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <main+0x2a0>)
 80007c0:	f043 0305 	orr.w	r3, r3, #5
 80007c4:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = pwmHigh;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <main+0x2a0>)
 80007c8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80007cc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2NE);
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <main+0x2a0>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <main+0x2a0>)
 80007d4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007d8:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = 0;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <main+0x2a0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER &= ~(TIM_CCER_CC3E | TIM_CCER_CC3NE);
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <main+0x2a0>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a15      	ldr	r2, [pc, #84]	; (800083c <main+0x2a0>)
 80007e6:	f423 63a0 	bic.w	r3, r3, #1280	; 0x500
 80007ea:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <main+0x2a0>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	615a      	str	r2, [r3, #20]

		break;
 80007f2:	e045      	b.n	8000880 <main+0x2e4>
	case 4:
		TIM1->CCR1 = 0;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <main+0x2a0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1NE);
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <main+0x2a0>)
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <main+0x2a0>)
 8000800:	f043 0305 	orr.w	r3, r3, #5
 8000804:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = 0;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <main+0x2a0>)
 8000808:	2200      	movs	r2, #0
 800080a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER &= ~(TIM_CCER_CC2E | TIM_CCER_CC2NE);
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <main+0x2a0>)
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <main+0x2a0>)
 8000812:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000816:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = pwmHigh;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <main+0x2a0>)
 800081a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3NE);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <main+0x2a0>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <main+0x2a0>)
 8000826:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800082a:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <main+0x2a0>)
 800082e:	2201      	movs	r2, #1
 8000830:	615a      	str	r2, [r3, #20]

		break;
 8000832:	e025      	b.n	8000880 <main+0x2e4>
 8000834:	40010800 	.word	0x40010800
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40012c00 	.word	0x40012c00
	case 5:
		TIM1->CCR1 = 0;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <main+0x304>)
 8000842:	2200      	movs	r2, #0
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC1NE);
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <main+0x304>)
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <main+0x304>)
 800084c:	f023 0305 	bic.w	r3, r3, #5
 8000850:	6213      	str	r3, [r2, #32]

		TIM1->CCR2 = 0;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <main+0x304>)
 8000854:	2200      	movs	r2, #0
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2NE);
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0x304>)
 800085a:	6a1b      	ldr	r3, [r3, #32]
 800085c:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <main+0x304>)
 800085e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000862:	6213      	str	r3, [r2, #32]

		TIM1->CCR3 = pwmHigh;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <main+0x304>)
 8000866:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800086a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3NE);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0x304>)
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <main+0x304>)
 8000872:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000876:	6213      	str	r3, [r2, #32]

		TIM1->EGR = TIM_EGR_UG;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <main+0x304>)
 800087a:	2201      	movs	r2, #1
 800087c:	615a      	str	r2, [r3, #20]

		break;
 800087e:	bf00      	nop
	}

	state++;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
	state = state % 6;
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <main+0x308>)
 800088a:	fba3 1302 	umull	r1, r3, r3, r2
 800088e:	0899      	lsrs	r1, r3, #2
 8000890:	460b      	mov	r3, r1
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	440b      	add	r3, r1
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
	if (rot < topValue)
 800089c:	e6ec      	b.n	8000678 <main+0xdc>
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	aaaaaaab 	.word	0xaaaaaaab

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f7ff fd63 	bl	8000378 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80008b2:	bf00      	nop
 80008b4:	f7ff fd74 	bl	80003a0 <LL_FLASH_GetLatency>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d1fa      	bne.n	80008b4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80008be:	f7ff fc77 	bl	80001b0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008c2:	bf00      	nop
 80008c4:	f7ff fc82 	bl	80001cc <LL_RCC_HSE_IsReady>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d1fa      	bne.n	80008c4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSE_EnableCSS();
 80008ce:	f7ff fc61 	bl	8000194 <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80008d2:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80008d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80008da:	f7ff fd05 	bl	80002e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008de:	f7ff fce3 	bl	80002a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008e2:	bf00      	nop
 80008e4:	f7ff fcee 	bl	80002c4 <LL_RCC_PLL_IsReady>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d1fa      	bne.n	80008e4 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fc9e 	bl	8000230 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80008f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008f8:	f7ff fcae 	bl	8000258 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fcbf 	bl	8000280 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff fc74 	bl	80001f0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000908:	bf00      	nop
 800090a:	f7ff fc85 	bl	8000218 <LL_RCC_GetSysClkSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b08      	cmp	r3, #8
 8000912:	d1fa      	bne.n	800090a <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(72000000);
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <SystemClock_Config+0x7c>)
 8000916:	f000 fd77 	bl	8001408 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800091a:	4802      	ldr	r0, [pc, #8]	; (8000924 <SystemClock_Config+0x7c>)
 800091c:	f000 fda6 	bl	800146c <LL_SetSystemCoreClock>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	044aa200 	.word	0x044aa200

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b098      	sub	sp, #96	; 0x60
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800092e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800093e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fdc2 	bl	80014d0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800096c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000970:	f7ff fcea 	bl	8000348 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = timerHigh;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800098e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000992:	4619      	mov	r1, r3
 8000994:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000996:	f000 fab3 	bl	8000f00 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800099a:	4849      	ldr	r0, [pc, #292]	; (8000ac0 <MX_TIM1_Init+0x198>)
 800099c:	f7ff fd0c 	bl	80003b8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4847      	ldr	r0, [pc, #284]	; (8000ac0 <MX_TIM1_Init+0x198>)
 80009a4:	f7ff fd9c 	bl	80004e0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80009a8:	2101      	movs	r1, #1
 80009aa:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <MX_TIM1_Init+0x198>)
 80009ac:	f7ff fd56 	bl	800045c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80009d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d4:	461a      	mov	r2, r3
 80009d6:	2101      	movs	r1, #1
 80009d8:	4839      	ldr	r0, [pc, #228]	; (8000ac0 <MX_TIM1_Init+0x198>)
 80009da:	f000 faef 	bl	8000fbc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80009de:	2101      	movs	r1, #1
 80009e0:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <MX_TIM1_Init+0x198>)
 80009e2:	f7ff fcf9 	bl	80003d8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80009e6:	2110      	movs	r1, #16
 80009e8:	4835      	ldr	r0, [pc, #212]	; (8000ac0 <MX_TIM1_Init+0x198>)
 80009ea:	f7ff fd37 	bl	800045c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fa:	461a      	mov	r2, r3
 80009fc:	2110      	movs	r1, #16
 80009fe:	4830      	ldr	r0, [pc, #192]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a00:	f000 fadc 	bl	8000fbc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8000a04:	2110      	movs	r1, #16
 8000a06:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a08:	f7ff fce6 	bl	80003d8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a12:	f7ff fd23 	bl	800045c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a22:	461a      	mov	r2, r3
 8000a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a28:	4825      	ldr	r0, [pc, #148]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a2a:	f000 fac7 	bl	8000fbc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8000a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a32:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a34:	f7ff fcd0 	bl	80003d8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a3c:	f7ff fd64 	bl	8000508 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000a40:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a42:	f7ff fd73 	bl	800052c <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 20;
 8000a52:	2314      	movs	r3, #20
 8000a54:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_TIM1_Init+0x198>)
 8000a6e:	f000 fadd 	bl	800102c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f7ff fc68 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000a78:	2008      	movs	r0, #8
 8000a7a:	f7ff fc65 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  PB1   ------> TIM1_CH3N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_TIM1_Init+0x19c>)
 8000a80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a82:	2309      	movs	r3, #9
 8000a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a86:	2302      	movs	r3, #2
 8000a88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM1_Init+0x1a0>)
 8000a94:	f000 f967 	bl	8000d66 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000a98:	f240 3303 	movw	r3, #771	; 0x303
 8000a9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM1_Init+0x1a4>)
 8000ab0:	f000 f959 	bl	8000d66 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial_TIM1();
 8000ab4:	f7ff fd4a 	bl	800054c <LL_GPIO_AF_RemapPartial_TIM1>

}
 8000ab8:	bf00      	nop
 8000aba:	3760      	adds	r7, #96	; 0x60
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	04078087 	.word	0x04078087
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000ad4:	2010      	movs	r0, #16
 8000ad6:	f7ff fc37 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000ada:	2020      	movs	r0, #32
 8000adc:	f7ff fc34 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f7ff fc31 	bl	8000348 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000ae6:	2008      	movs	r0, #8
 8000ae8:	f7ff fc2e 	bl	8000348 <LL_APB2_GRP1_EnableClock>

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <HardFault_Handler+0x4>

08000b02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <BusFault_Handler+0x4>

08000b0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <UsageFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <SystemInit+0x5c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <SystemInit+0x5c>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SystemInit+0x5c>)
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4911      	ldr	r1, [pc, #68]	; (8000ba0 <SystemInit+0x5c>)
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <SystemInit+0x60>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x5c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <SystemInit+0x5c>)
 8000b66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <SystemInit+0x5c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SystemInit+0x5c>)
 8000b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SystemInit+0x5c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <SystemInit+0x5c>)
 8000b82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b86:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SystemInit+0x5c>)
 8000b8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SystemInit+0x64>)
 8000b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b96:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	f8ff0000 	.word	0xf8ff0000
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bae:	e003      	b.n	8000bb8 <LoopCopyDataInit>

08000bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb6:	3104      	adds	r1, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bc0:	d3f6      	bcc.n	8000bb0 <CopyDataInit>
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc4:	e002      	b.n	8000bcc <LoopFillZerobss>

08000bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc8:	f842 3b04 	str.w	r3, [r2], #4

08000bcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bd0:	d3f9      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd2:	f7ff ffb7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f000 fc57 	bl	8001488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fcdf 	bl	800059c <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r3, =_sidata
 8000be0:	08001510 	.word	0x08001510
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000bec:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000bf0:	20000020 	.word	0x20000020

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>

08000bf6 <LL_GPIO_SetPinMode>:
{
 8000bf6:	b490      	push	{r4, r7}
 8000bf8:	b088      	sub	sp, #32
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	461a      	mov	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	0e1b      	lsrs	r3, r3, #24
 8000c0a:	4413      	add	r3, r2
 8000c0c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa93 f3a3 	rbit	r3, r3
 8000c1a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	210f      	movs	r1, #15
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	fa93 f3a3 	rbit	r3, r3
 8000c3a:	61bb      	str	r3, [r7, #24]
  return result;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fab3 f383 	clz	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	6023      	str	r3, [r4, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc90      	pop	{r4, r7}
 8000c58:	4770      	bx	lr

08000c5a <LL_GPIO_SetPinSpeed>:
{
 8000c5a:	b490      	push	{r4, r7}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	0e1b      	lsrs	r3, r3, #24
 8000c6e:	4413      	add	r3, r2
 8000c70:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa93 f3a3 	rbit	r3, r3
 8000c7e:	613b      	str	r3, [r7, #16]
  return result;
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	fab3 f383 	clz	r3, r3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	61bb      	str	r3, [r7, #24]
  return result;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6023      	str	r3, [r4, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc90      	pop	{r4, r7}
 8000cbc:	4770      	bx	lr

08000cbe <LL_GPIO_SetPinOutputType>:
{
 8000cbe:	b490      	push	{r4, r7}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	0e1b      	lsrs	r3, r3, #24
 8000cd2:	4413      	add	r3, r2
 8000cd4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	613b      	str	r3, [r7, #16]
  return result;
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	2104      	movs	r1, #4
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	61bb      	str	r3, [r7, #24]
  return result;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	6023      	str	r3, [r4, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc90      	pop	{r4, r7}
 8000d20:	4770      	bx	lr

08000d22 <LL_GPIO_SetPinPull>:
{
 8000d22:	b480      	push	{r7}
 8000d24:	b087      	sub	sp, #28
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	43db      	mvns	r3, r3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return result;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	408b      	lsls	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	60da      	str	r2, [r3, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b088      	sub	sp, #32
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	0c1b      	lsrs	r3, r3, #16
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	fa93 f3a3 	rbit	r3, r3
 8000d84:	60fb      	str	r3, [r7, #12]
  return result;
 8000d86:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000d90:	e040      	b.n	8000e14 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000d92:	2201      	movs	r2, #1
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	409a      	lsls	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d036      	beq.n	8000e0e <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d806      	bhi.n	8000db4 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000da6:	f240 1201 	movw	r2, #257	; 0x101
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	e008      	b.n	8000dc6 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3b08      	subs	r3, #8
 8000db8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dc4:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	69b9      	ldr	r1, [r7, #24]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff11 	bl	8000bf6 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffa0 	bl	8000d22 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d003      	beq.n	8000df2 <LL_GPIO_Init+0x8c>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b09      	cmp	r3, #9
 8000df0:	d10d      	bne.n	8000e0e <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	461a      	mov	r2, r3
 8000df8:	69b9      	ldr	r1, [r7, #24]
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff2d 	bl	8000c5a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	461a      	mov	r2, r3
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff58 	bl	8000cbe <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1b8      	bne.n	8000d92 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LL_TIM_SetPrescaler>:
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <LL_TIM_SetAutoReload>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <LL_TIM_SetRepetitionCounter>:
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <LL_TIM_OC_SetCompareCH1>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <LL_TIM_OC_SetCompareCH2>:
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <LL_TIM_OC_SetCompareCH3>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_TIM_OC_SetCompareCH4>:
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	615a      	str	r2, [r3, #20]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
	...

08000f00 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <LL_TIM_Init+0xb0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00b      	beq.n	8000f30 <LL_TIM_Init+0x30>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1e:	d007      	beq.n	8000f30 <LL_TIM_Init+0x30>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <LL_TIM_Init+0xb4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d003      	beq.n	8000f30 <LL_TIM_Init+0x30>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <LL_TIM_Init+0xb8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <LL_TIM_Init+0xb0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00b      	beq.n	8000f5e <LL_TIM_Init+0x5e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f4c:	d007      	beq.n	8000f5e <LL_TIM_Init+0x5e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <LL_TIM_Init+0xb4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d003      	beq.n	8000f5e <LL_TIM_Init+0x5e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <LL_TIM_Init+0xb8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff63 	bl	8000e44 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff50 	bl	8000e2a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <LL_TIM_Init+0xb0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d105      	bne.n	8000f9e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	7c1b      	ldrb	r3, [r3, #16]
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff60 	bl	8000e5e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff9e 	bl	8000ee0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40012c00 	.word	0x40012c00
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40000800 	.word	0x40000800

08000fbc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d012      	beq.n	8000ff8 <LL_TIM_OC_Init+0x3c>
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d802      	bhi.n	8000fdc <LL_TIM_OC_Init+0x20>
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d007      	beq.n	8000fea <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8000fda:	e022      	b.n	8001022 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8000fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fe0:	d011      	beq.n	8001006 <LL_TIM_OC_Init+0x4a>
 8000fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fe6:	d015      	beq.n	8001014 <LL_TIM_OC_Init+0x58>
      break;
 8000fe8:	e01b      	b.n	8001022 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 f865 	bl	80010bc <OC1Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff6:	e014      	b.n	8001022 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f8c4 	bl	8001188 <OC2Config>
 8001000:	4603      	mov	r3, r0
 8001002:	75fb      	strb	r3, [r7, #23]
      break;
 8001004:	e00d      	b.n	8001022 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f927 	bl	800125c <OC3Config>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
      break;
 8001012:	e006      	b.n	8001022 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f98a 	bl	8001330 <OC4Config>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
      break;
 8001020:	bf00      	nop
  }

  return result;
 8001022:	7dfb      	ldrb	r3, [r7, #23]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	7b12      	ldrb	r2, [r2, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	89d2      	ldrh	r2, [r2, #14]
 800107c:	4313      	orrs	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4313      	orrs	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	f023 0201 	bic.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f023 0202 	bic.w	r2, r3, #2
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f023 0201 	bic.w	r2, r3, #1
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <OC1Config+0xc8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11e      	bne.n	800115c <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f023 0208 	bic.w	r2, r3, #8
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f023 0204 	bic.w	r2, r3, #4
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4619      	mov	r1, r3
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe82 	bl	8000e78 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40012c00 	.word	0x40012c00

08001188 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	f023 0210 	bic.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	4313      	orrs	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f023 0220 	bic.w	r2, r3, #32
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f023 0210 	bic.w	r2, r3, #16
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <OC2Config+0xd0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d11f      	bne.n	8001230 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	019b      	lsls	r3, r3, #6
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	019b      	lsls	r3, r3, #6
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fe25 	bl	8000e92 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40012c00 	.word	0x40012c00

0800125c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	4313      	orrs	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <OC3Config+0xd0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d11f      	bne.n	8001302 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4313      	orrs	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4313      	orrs	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fdc9 	bl	8000eac <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00

08001330 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800135e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	4313      	orrs	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	031b      	lsls	r3, r3, #12
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	031b      	lsls	r3, r3, #12
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <OC4Config+0xa0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d107      	bne.n	80013a8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd83 	bl	8000ec6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40012c00 	.word	0x40012c00

080013d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <LL_InitTick+0x30>)
 80013e8:	3b01      	subs	r3, #1
 80013ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <LL_InitTick+0x30>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <LL_InitTick+0x30>)
 80013f4:	2205      	movs	r2, #5
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffdd 	bl	80013d4 <LL_InitTick>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <LL_mDelay+0x44>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001432:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800143a:	d00c      	beq.n	8001456 <LL_mDelay+0x32>
  {
    Delay++;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001442:	e008      	b.n	8001456 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LL_mDelay+0x44>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <LL_mDelay+0x32>
    {
      Delay--;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f3      	bne.n	8001444 <LL_mDelay+0x20>
    }
  }
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <LL_SetSystemCoreClock+0x18>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000

08001488 <__libc_init_array>:
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	2500      	movs	r5, #0
 800148c:	4e0c      	ldr	r6, [pc, #48]	; (80014c0 <__libc_init_array+0x38>)
 800148e:	4c0d      	ldr	r4, [pc, #52]	; (80014c4 <__libc_init_array+0x3c>)
 8001490:	1ba4      	subs	r4, r4, r6
 8001492:	10a4      	asrs	r4, r4, #2
 8001494:	42a5      	cmp	r5, r4
 8001496:	d109      	bne.n	80014ac <__libc_init_array+0x24>
 8001498:	f000 f822 	bl	80014e0 <_init>
 800149c:	2500      	movs	r5, #0
 800149e:	4e0a      	ldr	r6, [pc, #40]	; (80014c8 <__libc_init_array+0x40>)
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <__libc_init_array+0x44>)
 80014a2:	1ba4      	subs	r4, r4, r6
 80014a4:	10a4      	asrs	r4, r4, #2
 80014a6:	42a5      	cmp	r5, r4
 80014a8:	d105      	bne.n	80014b6 <__libc_init_array+0x2e>
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014b0:	4798      	blx	r3
 80014b2:	3501      	adds	r5, #1
 80014b4:	e7ee      	b.n	8001494 <__libc_init_array+0xc>
 80014b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014ba:	4798      	blx	r3
 80014bc:	3501      	adds	r5, #1
 80014be:	e7f2      	b.n	80014a6 <__libc_init_array+0x1e>
 80014c0:	08001508 	.word	0x08001508
 80014c4:	08001508 	.word	0x08001508
 80014c8:	08001508 	.word	0x08001508
 80014cc:	0800150c 	.word	0x0800150c

080014d0 <memset>:
 80014d0:	4603      	mov	r3, r0
 80014d2:	4402      	add	r2, r0
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d100      	bne.n	80014da <memset+0xa>
 80014d8:	4770      	bx	lr
 80014da:	f803 1b01 	strb.w	r1, [r3], #1
 80014de:	e7f9      	b.n	80014d4 <memset+0x4>

080014e0 <_init>:
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	bf00      	nop
 80014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e6:	bc08      	pop	{r3}
 80014e8:	469e      	mov	lr, r3
 80014ea:	4770      	bx	lr

080014ec <_fini>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr
